type ICPFile = record {
  id : nat;
  owner : text;
  data : blob;
  hash : opt text;
  name : text;
};
type ICPFileError = variant {
  Error : text;
  NotFound;
  NotAuthorized;
  InvalidPath : text;
};
type ICPFileStat = record {
  id : nat;
  hash : opt text;
  name : text;
  size : nat64;
};
type Path = variant { File : record { text; ICPFileStat }; Path : text };
type PathNode = record { id : nat64; node_type : Path; children : vec nat64 };
type Result = variant { Ok; Err : ICPFileError };
type Result_1 = variant { Ok : nat; Err : ICPFileError };
type Result_2 = variant { Ok : ICPFile; Err : ICPFileError };
type Result_3 = variant { Ok : vec PathNode; Err : ICPFileError };
service : {
  add_chunk : (nat, blob) -> (Result);
  create_file : (ICPFile, opt text) -> (Result_1);
  delete_file : (PathNode) -> (Result_1);
  end_file_upload : (nat) -> ();
  export_candid : () -> (text) query;
  get_file : (nat) -> (Result_2) query;
  get_files : () -> (vec ICPFileStat) query;
  get_path_contents : (opt text) -> (Result_3) query;
  get_status : () -> (nat64) query;
  greet : (text) -> (text) query;
  truncate_file : (nat) -> (Result);
}
